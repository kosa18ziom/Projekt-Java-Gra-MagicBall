import java.awt.Graphics2D;
import java.awt.event.KeyEvent;

/**
*@author Konrad Kosiñski & Bart³omiej Ba³dyga
*klasa gracza, posiada chocia¿by aktualn¹ jego pozycjê, odpowiedzialna za
*poruszanie siê gracza 
*/
public class Player extends Actor {
	protected static final int PLAYER_SPEED = 5;
	protected int vx;
	protected int vy;
	private boolean up,down,left,right;
	public boolean drag;
	public int Tup, Tdown, Tleft, Tright;
	private int Ax, Ay;
	public int tabStage[][];
	public int tabRzeczy[][];
	private boolean teleport;
	private int umiera;
	
	/**
	 * konstruktor klasy Player, odpowiedzialny za stworzenie nowego gracza,
	 * a tak¿e nadanie mu obrazka i wartoœci atrybutom
	 */
	public Player(Stage stage,int level) {
		super(stage);
		setSpriteNames( new String[] {"kulka.gif"});
		Tup=0; Tdown=0; Tleft=0; Tright=0; umiera =-1;
		tabStage = new int [12][17];
		tabRzeczy = new int [12][17];
		if(level==1)
		{
			int tab[] = {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
						2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
						2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
						2,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,2,
						2,0,0,0,1,1,1,1,0,0,0,1,4,1,0,0,2,
						2,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,2,
						2,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,2,
						2,0,0,0,1,1,1,1,1,1,0,1,0,0,0,0,2,
						2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
						2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
						2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
						2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2};
			inStage(tab);
			inRzeczy();
		}
		else if(level==2)
		{
			int tab[] = {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
						2,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,2,
						2,1,1,0,0,1,0,0,0,0,1,1,1,1,4,1,2,
						2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
						2,1,1,0,0,1,2,2,2,1,1,1,0,0,0,0,2,
						2,1,1,1,1,1,2,2,2,1,1,0,0,0,0,0,2,
						2,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,2,
						2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,2,
						2,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,2,
						2,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,2,
						2,1,1,2,1,2,0,0,0,1,1,1,0,0,0,0,2,
						2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2};
			inStage(tab);
			inRzeczy();
		}
		else if(level==3)
		{
			int tab[] = {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
						2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
						2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
						2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
						2,0,0,0,1,1,1,1,2,1,1,1,0,0,0,0,2,
						2,0,0,0,1,1,1,1,2,1,1,1,0,0,0,0,2,
						2,0,0,0,1,1,1,1,2,1,4,1,0,0,0,0,2,
						2,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,2,
						2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
						2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
						2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
						2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2};
			inStage(tab);
			inRzeczy();
		}
	}
	public void setTeleportTrue() { teleport=true;}
	public void setTeleportFalse() { teleport=false;}
	public boolean getTeleport() { return teleport;}
	public boolean zatskrzynka(int a, int b)
	{
		if(tabStage[b][a]==0)
		{
			tabStage[b][a]=1;
			return true;
		}
		else
			return false;
	}
	public void inStage(int tab[])
	{
		int i, j;
		int k=0;
		for(i=0;i<12;i++)
		{
			for(j=0;j<17;j++)
			{
				tabStage[i][j]=tab[k];
				k++;
			}
		}
	}
	public void inRzeczy()
	{
		int i, j;
		for(i=0;i<12;i++)
		{
			for(j=0;j<17;j++)
			{
				tabRzeczy[i][j]=tabStage[i][j];
			}
		}
	}
	public void paint(Graphics2D g){
		if(markedForRemoval) g.drawImage(spriteCache.getSprite("kulkadead.gif"), x, y, stage);
		else g.drawImage( spriteCache.getSprite("kulka.gif"), x,y, stage );
	}
	/**
	 * metoda odpowiedzialna za zmianê po³o¿enia gracza
	 */
	public void act() {
		super.act();
		if(Tup>0){ Tup--; if(y>0)y=y-5;}
		else if(Tdown>0){ Tdown--; if(y<450) y=y+5;}
		else if(Tleft>0){ Tleft--; if(x>0) x=x-5;}
		else if(Tright>0){ Tright--; if(x<700) x=x+5;}
	}
	public int getVx() { return vx; }
	public void setVx(int i) {vx = i; }
	public int getVy() { return vy; }
	public void setVy(int i) {vy = i; }
	public void setAx(int i) { Ax = i;}
	public int getAx() {return Ax;}
	public void setAy(int i) { Ay = i;}
	public int getAy() {return Ay;}
	public void collision()
	{
		if(tabStage[Ay][Ax]==0)
		{
			if(umiera==-1) umiera=10;
			else if(umiera==0)
			{
				remove();
			}
			else umiera--;
		}
	}
	public boolean czysciana()
	{
		if(tabStage[Ay][Ax]==2)
			return true;
		else
			return false;
	}
	public boolean czysciana(int a, int b)
	{
		if(tabStage[b][a]==2 || tabRzeczy[b][a]==3)
			return true;
		else
			return false;
	}
	public boolean czyskrzynka(int a, int b)
	{
		if(tabRzeczy[a][b]==3)
			return true;
		else
			return false;
	}
	protected void updateSpeed() {
		vx=0;vy=0;
		if (down) vy = PLAYER_SPEED;
		else if (up) vy = -PLAYER_SPEED;
		else if (left) vx = -PLAYER_SPEED;
		else if (right) vx = PLAYER_SPEED;
	}
	public void keyReleased(KeyEvent e) {
		switch (e.getKeyCode()) {
		case KeyEvent.VK_DOWN : down = false; break;
		case KeyEvent.VK_UP : up = false; break;
		case KeyEvent.VK_LEFT : left = false; break;
		case KeyEvent.VK_RIGHT : right = false; break;
		case KeyEvent.VK_Z : drag =false; break;
		}
		//updateSpeed();
	}
	public void keyPressed(KeyEvent e) {
		switch (e.getKeyCode()) {
		case KeyEvent.VK_UP : 
			if(Tup==0 && Tdown==0 && Tleft==0 && Tright==0){/*up = true;*/ 
				if(y>0){ 
					Ay--;
					if(czysciana()) Ay++;
					else Tup=10;
				}
			} break;
		case KeyEvent.VK_LEFT : 
			if(Tup==0 && Tdown==0 && Tleft==0 && Tright==0){/*left = true;*/ 
				if(x>0){
					Ax--;
					if(czysciana()) Ax++;
					else Tleft=10;
				}
			} break;
		case KeyEvent.VK_RIGHT : 
			if(Tup==0 && Tdown==0 && Tleft==0 && Tright==0){/*right = true;*/ 
				if(x<700){
					Ax++;
					if(czysciana()) Ax--;
					else Tright=10;
				}
			} break;
		case KeyEvent.VK_DOWN : 
			if(Tup==0 && Tdown==0 && Tleft==0 && Tright==0){/*down = true;*/ 
				if(y<450){
					Ay++;
					if(czysciana()) Ay--;
					else Tdown=10;
				}
			} break;
		case KeyEvent.VK_S : 
			boolean jest = czyskrzynka(getAy()-1, getAx());
			if(jest)
			{
			if(Tup==0 && Tdown==0 && Tleft==0 && Tright==0){/*up = true;*/ 
				if(y>0){ 
					Ay++;
					if(czysciana()) Ay--;
					else Tdown=10;
				}
				}
			} break;
		case KeyEvent.VK_D : 
			boolean jest2 = czyskrzynka(getAy(), getAx()-1);
			if(jest2)
			{
			if(Tup==0 && Tdown==0 && Tleft==0 && Tright==0){/*up = true;*/ 
				if(y>0){ 
					Ax++;
					if(czysciana()) Ax--;
					else Tright=10;
				}
				}
			} break;
		
		}
		//updateSpeed();
	}
}

